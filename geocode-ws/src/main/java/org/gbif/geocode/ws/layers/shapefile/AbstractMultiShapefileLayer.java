package org.gbif.geocode.ws.layers.shapefile;

import org.gbif.geocode.api.cache.AbstractBitmapCachedLayer;
import org.gbif.geocode.api.model.Location;

import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * A multiple shapefile-backed layer with a bitmap cache.
 *
 * Assumes shapefiles have three columns (id, title, isoCode), as generated by database/import.sh.
 */
public abstract class AbstractMultiShapefileLayer extends AbstractBitmapCachedLayer {
  private Logger LOG = LoggerFactory.getLogger(getClass());
  private long queries = 0;

  final AbstractShapefileLayer[] shapefileLayers;

  AbstractMultiShapefileLayer(AbstractShapefileLayer[] shapefileLayers, InputStream bitmap, int maxLocations) {
    super(bitmap, maxLocations);
    this.shapefileLayers = shapefileLayers;
  }

  /**
   * Query the shapefile.
   */
  @Override
  protected List<Location> queryDatasource(double latitude, double longitude, double uncertainty) {
    List<Location> locations = new ArrayList<>();

    for (int i = 0; i < shapefileLayers.length; i++) {
      locations.addAll(shapefileLayers[i].queryDatasource(latitude, longitude, uncertainty));
    }

    locations.sort(Location::compareTo);

    if ((++queries % 10_000) == 0) {
      LOG.info("{} did {} shapefile queries.", name(), queries);
    }

    return locations;
  }
}

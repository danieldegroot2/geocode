<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.gbif.geocode.ws.persistence.mapper.TileMapper">

  <resultMap id="tileMap" type="org.gbif.geocode.ws.model.Tile">
    <result property="t" column="t" javaType="_byte[]" jdbcType="BINARY"/>
  </resultMap>

  <!-- Tiles from the public.political table -->
  <select id="tilePolitical" resultMap="tileMap">
    WITH overlappings AS (
      SELECT
        'http://marineregions.org/mrgid/' || political.mrgid_eez AS id,
        'Political' AS type,
        'http://marineregions.org' AS source,
        political.union AS title,
        iso_map.iso2 AS isoCountryCode2Digit,
        geom,
        centroid_geom
      FROM political
      LEFT OUTER JOIN iso_map ON political.iso_ter1 = iso_map.iso3
      WHERE geom &amp;&amp; ST_MakeBox2D(ST_Point(#{b1}, #{b2}), ST_Point(#{b3}, #{b4}))
    ), intersectings AS (
      SELECT * FROM overlappings
      WHERE ST_AsMVTGeom(geom,ST_MakeBox2D(ST_Point(#{b1}, #{b2}), ST_Point(#{b3}, #{b4})),4096,0,true) IS NOT NULL
    )
    SELECT ST_ASMVT(tile, 'political', 4096, 'mvtgeometry') AS t
    FROM (
      SELECT
        id, type, source, title, isoCountryCode2Digit,
        ST_AsMVTGeom(geom,ST_MakeBox2D(ST_Point(#{b1}, #{b2}), ST_Point(#{b3}, #{b4})),4096,0,true) AS mvtgeometry
      FROM intersectings
      UNION ALL
      SELECT
        id, type, source, title, isoCountryCode2Digit,
        ST_AsMVTGeom(centroid_geom,ST_MakeBox2D(ST_Point(#{b1}, #{b2}), ST_Point(#{b3}, #{b4})),4096,0,true) AS mvtgeometry
      FROM intersectings
    ) AS tile;
  </select>

  <!-- Tiles from the public.continent table -->
  <select id="tileContinent" resultMap="tileMap">
    WITH overlappings AS (
      SELECT
        continent AS id,
        'Continent' AS type,
        'https://github.com/gbif/continents' AS source,
        continent AS title,
        NULL AS isoCountryCode2Digit,
        geom,
        centroid_geom
      FROM continent_subdivided
      WHERE geom &amp;&amp; ST_MakeBox2D(ST_Point(#{b1}, #{b2}), ST_Point(#{b3}, #{b4}))
    ), intersectings AS (
      SELECT * FROM overlappings
      WHERE ST_AsMVTGeom(geom,ST_MakeBox2D(ST_Point(#{b1}, #{b2}), ST_Point(#{b3}, #{b4})),4096,0,true) IS NOT NULL
    )
    SELECT ST_ASMVT(tile, 'continent', 4096, 'mvtgeometry') AS t
    FROM (
      SELECT
        id, type, source, title, isoCountryCode2Digit,
        ST_AsMVTGeom(geom,ST_MakeBox2D(ST_Point(#{b1}, #{b2}), ST_Point(#{b3}, #{b4})),4096,0,true) AS mvtgeometry
      FROM intersectings
      UNION ALL
      SELECT
        id, type, source, title, isoCountryCode2Digit,
        ST_AsMVTGeom(centroid_geom,ST_MakeBox2D(ST_Point(#{b1}, #{b2}), ST_Point(#{b3}, #{b4})),4096,0,true) AS mvtgeometry
      FROM intersectings
    ) AS tile;
  </select>

  <!-- Tiles from the public.gadm5 table -->
  <select id="tileGadm5" resultMap="tileMap">
    WITH overlappings AS (
      SELECT
        gid_5 AS id,
        'GADM5' AS type,
        'http://gadm.org' AS source,
        name_5 AS title,
        iso_map.iso2 AS isoCountryCode2Digit,
        geom AS geom,
        centroid_geom
      FROM gadm
      LEFT OUTER JOIN iso_map ON gadm.gid_0 = iso_map.iso3
      WHERE geom &amp;&amp; ST_MakeBox2D(ST_Point(#{b1}, #{b2}), ST_Point(#{b3}, #{b4}))
        AND gid_5 IS NOT NULL
    ), intersectings AS (
      SELECT * FROM overlappings
      WHERE ST_AsMVTGeom(geom,ST_MakeBox2D(ST_Point(#{b1}, #{b2}), ST_Point(#{b3}, #{b4})),4096,0,true) IS NOT NULL
    )
    SELECT ST_ASMVT(tile, 'gadm', 4096, 'mvtgeometry') AS t
    FROM (
      SELECT
        id, type, source, title, isoCountryCode2Digit,
        ST_AsMVTGeom(geom,ST_MakeBox2D(ST_Point(#{b1}, #{b2}), ST_Point(#{b3}, #{b4})),4096,0,true) AS mvtgeometry
      FROM intersectings
      UNION ALL
      SELECT
        id, type, source, title, isoCountryCode2Digit,
        ST_AsMVTGeom(centroid_geom,ST_MakeBox2D(ST_Point(#{b1}, #{b2}), ST_Point(#{b3}, #{b4})),4096,0,true) AS mvtgeometry
      FROM intersectings
    ) AS tile;
  </select>

  <!-- Tiles from the public.gadm4 table -->
  <select id="tileGadm4" resultMap="tileMap">
    WITH overlappings AS (
      SELECT
        gid_4 AS id,
        'GADM4' AS type,
        'http://gadm.org' AS source,
        name_4 AS title,
        iso_map.iso2 AS isoCountryCode2Digit,
        geom AS geom,
        centroid_geom
      FROM gadm4
      LEFT OUTER JOIN iso_map ON gadm4.gid_0 = iso_map.iso3
      WHERE geom &amp;&amp; ST_MakeBox2D(ST_Point(#{b1}, #{b2}), ST_Point(#{b3}, #{b4}))
        AND gid_4 IS NOT NULL
    ), intersectings AS (
      SELECT * FROM overlappings
      WHERE ST_AsMVTGeom(geom,ST_MakeBox2D(ST_Point(#{b1}, #{b2}), ST_Point(#{b3}, #{b4})),4096,0,true) IS NOT NULL
    )
    SELECT ST_ASMVT(tile, 'gadm', 4096, 'mvtgeometry') AS t
    FROM (
      SELECT
        id, type, source, title, isoCountryCode2Digit,
        ST_AsMVTGeom(geom,ST_MakeBox2D(ST_Point(#{b1}, #{b2}), ST_Point(#{b3}, #{b4})),4096,0,true) AS mvtgeometry
      FROM intersectings
      UNION ALL
      SELECT
        id, type, source, title, isoCountryCode2Digit,
        ST_AsMVTGeom(centroid_geom,ST_MakeBox2D(ST_Point(#{b1}, #{b2}), ST_Point(#{b3}, #{b4})),4096,0,true) AS mvtgeometry
      FROM intersectings
    ) AS tile;
  </select>

  <!-- Tiles from the public.gadm3 table -->
  <select id="tileGadm3" resultMap="tileMap">
    WITH overlappings AS (
      SELECT
        gid_3 AS id,
        'GADM3' AS type,
        'http://gadm.org' AS source,
        name_3 AS title,
        iso_map.iso2 AS isoCountryCode2Digit,
        geom AS geom,
        centroid_geom
      FROM gadm3
      LEFT OUTER JOIN iso_map ON gadm3.gid_0 = iso_map.iso3
      WHERE geom &amp;&amp; ST_MakeBox2D(ST_Point(#{b1}, #{b2}), ST_Point(#{b3}, #{b4}))
        AND gid_3 IS NOT NULL
    ), intersectings AS (
      SELECT * FROM overlappings
      WHERE ST_AsMVTGeom(geom,ST_MakeBox2D(ST_Point(#{b1}, #{b2}), ST_Point(#{b3}, #{b4})),4096,0,true) IS NOT NULL
    )
    SELECT ST_ASMVT(tile, 'gadm', 4096, 'mvtgeometry') AS t
    FROM (
      SELECT
        id, type, source, title, isoCountryCode2Digit,
        ST_AsMVTGeom(geom,ST_MakeBox2D(ST_Point(#{b1}, #{b2}), ST_Point(#{b3}, #{b4})),4096,0,true) AS mvtgeometry
      FROM intersectings
      UNION ALL
      SELECT
        id, type, source, title, isoCountryCode2Digit,
        ST_AsMVTGeom(centroid_geom,ST_MakeBox2D(ST_Point(#{b1}, #{b2}), ST_Point(#{b3}, #{b4})),4096,0,true) AS mvtgeometry
      FROM intersectings
    ) AS tile;
  </select>

  <!-- Tiles from the public.gadm2 table -->
  <select id="tileGadm2" resultMap="tileMap">
    WITH overlappings AS (
      SELECT
        gid_2 AS id,
        'GADM2' AS type,
        'http://gadm.org' AS source,
        name_2 AS title,
        iso_map.iso2 AS isoCountryCode2Digit,
        geom AS geom,
        centroid_geom
      FROM gadm2
      LEFT OUTER JOIN iso_map ON gadm2.gid_0 = iso_map.iso3
      WHERE geom &amp;&amp; ST_MakeBox2D(ST_Point(#{b1}, #{b2}), ST_Point(#{b3}, #{b4}))
        AND gid_2 IS NOT NULL
    ), intersectings AS (
      SELECT * FROM overlappings
      WHERE ST_AsMVTGeom(geom,ST_MakeBox2D(ST_Point(#{b1}, #{b2}), ST_Point(#{b3}, #{b4})),4096,0,true) IS NOT NULL
    )
    SELECT ST_ASMVT(tile, 'gadm', 4096, 'mvtgeometry') AS t
    FROM (
      SELECT
        id, type, source, title, isoCountryCode2Digit,
        ST_AsMVTGeom(geom,ST_MakeBox2D(ST_Point(#{b1}, #{b2}), ST_Point(#{b3}, #{b4})),4096,0,true) AS mvtgeometry
      FROM intersectings
      UNION ALL
      SELECT
        id, type, source, title, isoCountryCode2Digit,
        ST_AsMVTGeom(centroid_geom,ST_MakeBox2D(ST_Point(#{b1}, #{b2}), ST_Point(#{b3}, #{b4})),4096,0,true) AS mvtgeometry
      FROM intersectings
    ) AS tile;
  </select>

  <!-- Tiles from the public.gadm1 table -->
  <select id="tileGadm1" resultMap="tileMap">
    WITH overlappings AS (
      SELECT
        gid_1 AS id,
        'GADM1' AS type,
        'http://gadm.org' AS source,
        name_1 AS title,
        iso_map.iso2 AS isoCountryCode2Digit,
        geom AS geom,
        centroid_geom
      FROM gadm1
      LEFT OUTER JOIN iso_map ON gadm1.gid_0 = iso_map.iso3
      WHERE geom &amp;&amp; ST_MakeBox2D(ST_Point(#{b1}, #{b2}), ST_Point(#{b3}, #{b4}))
        AND gid_1 IS NOT NULL
    ), intersectings AS (
      SELECT * FROM overlappings
      WHERE ST_AsMVTGeom(geom,ST_MakeBox2D(ST_Point(#{b1}, #{b2}), ST_Point(#{b3}, #{b4})),4096,0,true) IS NOT NULL
    )
    SELECT ST_ASMVT(tile, 'gadm', 4096, 'mvtgeometry') AS t
    FROM (
      SELECT
        id, type, source, title, isoCountryCode2Digit,
        ST_AsMVTGeom(geom,ST_MakeBox2D(ST_Point(#{b1}, #{b2}), ST_Point(#{b3}, #{b4})),4096,0,true) AS mvtgeometry
      FROM intersectings
      UNION ALL
      SELECT
        id, type, source, title, isoCountryCode2Digit,
        ST_AsMVTGeom(centroid_geom,ST_MakeBox2D(ST_Point(#{b1}, #{b2}), ST_Point(#{b3}, #{b4})),4096,0,true) AS mvtgeometry
      FROM intersectings
    ) AS tile;
  </select>

  <!-- Tiles from the public.iho table -->
  <select id="tileIho" resultMap="tileMap">
    WITH overlappings AS (
      SELECT
        'http://marineregions.org/mrgid/' || mrgid AS id,
        'IHO' AS type,
        'http://marineregions.org' AS source,
        name AS title,
        geom,
        centroid_geom
      FROM iho_subdivided
      WHERE geom &amp;&amp; ST_MakeBox2D(ST_Point(#{b1}, #{b2}), ST_Point(#{b3}, #{b4}))
    ), intersectings AS (
      SELECT * FROM overlappings
      WHERE ST_AsMVTGeom(geom,ST_MakeBox2D(ST_Point(#{b1}, #{b2}), ST_Point(#{b3}, #{b4})),4096,0,true) IS NOT NULL
    )
    SELECT ST_ASMVT(tile, 'iho', 4096, 'mvtgeometry') AS t
    FROM (
      SELECT
        id, type, source, title,
        ST_AsMVTGeom(geom,ST_MakeBox2D(ST_Point(#{b1}, #{b2}), ST_Point(#{b3}, #{b4})),4096,0,true) AS mvtgeometry
      FROM intersectings
      UNION ALL
      SELECT
        id, type, source, title,
        ST_AsMVTGeom(centroid_geom,ST_MakeBox2D(ST_Point(#{b1}, #{b2}), ST_Point(#{b3}, #{b4})),4096,0,true) AS mvtgeometry
      FROM intersectings
    ) AS tile;
  </select>

  <!-- Tiles from the public.wgsrpd_level4 table -->
  <select id="tileWgsrpd" resultMap="tileMap">
    WITH overlappings AS (
      SELECT
        level4_cod AS id,
        'WGSRPD' AS type,
        'http://www.tdwg.org/standards/109' AS source,
        level_4_na AS title,
        geom,
        centroid_geom
      FROM wgsrpd_level4
      WHERE geom &amp;&amp; ST_MakeBox2D(ST_Point(#{b1}, #{b2}), ST_Point(#{b3}, #{b4}))
    ), intersectings AS (
      SELECT * FROM overlappings
      WHERE ST_AsMVTGeom(geom,ST_MakeBox2D(ST_Point(#{b1}, #{b2}), ST_Point(#{b3}, #{b4})),4096,0,true) IS NOT NULL
    )
    SELECT ST_ASMVT(tile, 'iho', 4096, 'mvtgeometry') AS t
    FROM (
      SELECT
        id, type, source, title,
        ST_AsMVTGeom(geom,ST_MakeBox2D(ST_Point(#{b1}, #{b2}), ST_Point(#{b3}, #{b4})),4096,0,true) AS mvtgeometry
      FROM intersectings
      UNION ALL
      SELECT
        id, type, source, title,
        ST_AsMVTGeom(centroid_geom,ST_MakeBox2D(ST_Point(#{b1}, #{b2}), ST_Point(#{b3}, #{b4})),4096,0,true) AS mvtgeometry
      FROM intersectings
    ) AS tile;
  </select>

  <!-- Tiles from the public.centroids view -->
  <select id="tileCentroids" resultMap="tileMap">
    WITH overlappings AS (
      SELECT
        id,
        'Centroids' AS type,
        source,
        title,
        isoCountryCode2Digit,
        geom
      FROM centroids
      WHERE geom &amp;&amp; ST_MakeBox2D(ST_Point(#{b1}, #{b2}), ST_Point(#{b3}, #{b4}))
    ), intersectings AS (
      SELECT * FROM overlappings
      WHERE ST_AsMVTGeom(geom,ST_MakeBox2D(ST_Point(#{b1}, #{b2}), ST_Point(#{b3}, #{b4})),4096,0,true) IS NOT NULL
    )
    SELECT ST_ASMVT(tile, 'centroids', 4096, 'mvtgeometry') AS t
    FROM (
      SELECT
        id, type, source, title, isoCountryCode2Digit,
        ST_AsMVTGeom(geom,ST_MakeBox2D(ST_Point(#{b1}, #{b2}), ST_Point(#{b3}, #{b4})),4096,0,true) AS mvtgeometry
      FROM intersectings
    ) AS tile;
  </select>

  <insert id="toCache">
    INSERT INTO tile_cache (layer, z, x, y, tile, timeTaken) VALUES (#{layer}, #{z}, #{x}, #{y}, #{tile.t}, #{timeTaken});
  </insert>

  <select id="fromCache" resultMap="tileMap">
    SELECT tile AS t FROM tile_cache WHERE layer = #{layer} AND z = #{z} AND x = #{x} AND y = #{y} LIMIT 1;
  </select>

  <!-- The union (name) is required because there are islands etc with the same ISO code as mainland, but different names. -->
  <select id="svgPolitical" resultType="org.gbif.geocode.ws.model.SvgShape">
    SELECT CONCAT(REGEXP_REPLACE("union", '\W+', '', 'g'), iso_ter1, iso_ter2, iso_ter3) AS id, ST_AsSVG(geom) AS shape FROM political
  </select>

  <select id="svgContinent" resultType="org.gbif.geocode.ws.model.SvgShape">
    SELECT continent AS id, ST_AsSVG(ST_Subdivide(geom, 1000000)) AS shape FROM continent
  </select>

  <select id="svgGadm5" resultType="org.gbif.geocode.ws.model.SvgShape">
    SELECT COALESCE(gid_5, gid_4, gid_3, gid_2, gid_1, gid_0) AS id, ST_AsSVG(geom) AS shape FROM gadm WHERE gid_5 IS NOT NULL
  </select>

  <select id="svgGadm4" resultType="org.gbif.geocode.ws.model.SvgShape">
    SELECT COALESCE(gid_4, gid_3, gid_2, gid_1, gid_0) AS id, ST_AsSVG(geom) AS shape FROM gadm4 WHERE gid_4 IS NOT NULL
  </select>

  <select id="svgGadm3" resultType="org.gbif.geocode.ws.model.SvgShape">
    SELECT COALESCE(gid_3, gid_2, gid_1, gid_0) AS id, ST_AsSVG(geom) AS shape FROM gadm3 WHERE gid_3 IS NOT NULL
  </select>

  <select id="svgGadm2" resultType="org.gbif.geocode.ws.model.SvgShape">
    SELECT COALESCE(gid_2, gid_1, gid_0) AS id, ST_AsSVG(geom) AS shape FROM gadm2 WHERE gid_2 IS NOT NULL
  </select>

  <!-- Shapes with too many points (111k is OK, 152k is not) cause an ArrayIndexOutOfBoundsException.
       SELECT gid_0, gid_1, ST_NPoints(geom) AS points, name_1 FROM gadm1 ORDER BY points DESC LIMIT 10;
       Split these up. -->
  <select id="svgGadm1" resultType="org.gbif.geocode.ws.model.SvgShape">
    SELECT COALESCE(gid_1, gid_0) AS id, ST_AsSVG(geom) AS shape FROM gadm1 WHERE gid_1 IS NOT NULL AND gid_1 NOT IN('CAN.8_1', 'GBR.3_1')
  UNION ALL
    SELECT COALESCE(gid_1, gid_0) AS id, ST_AsSVG(ST_Intersection(geom, ST_SetSRID(ST_MakeBox2D(ST_Point(-180, -90), ST_Point(-88.985, 90)), 4326))) AS shape FROM gadm1 WHERE gid_1 = 'CAN.8_1'
  UNION ALL
    SELECT COALESCE(gid_1, gid_0) AS id, ST_AsSVG(ST_Intersection(geom, ST_SetSRID(ST_MakeBox2D(ST_Point(-88.985, -90), ST_Point(180, 90)), 4326))) AS shape FROM gadm1 WHERE gid_1 = 'CAN.8_1'
  UNION ALL
    SELECT COALESCE(gid_1, gid_0) AS id, ST_AsSVG(ST_Intersection(geom, ST_SetSRID(ST_MakeBox2D(ST_Point(-180, -90), ST_Point(180, 56.8)), 4326))) AS shape FROM gadm1 WHERE gid_1 = 'GBR.3_1'
  UNION ALL
    SELECT COALESCE(gid_1, gid_0) AS id, ST_AsSVG(ST_Intersection(geom, ST_SetSRID(ST_MakeBox2D(ST_Point(-180, 56.8), ST_Point(180, 90)), 4326))) AS shape FROM gadm1 WHERE gid_1 = 'GBR.3_1'
  </select>

  <!-- GADM0 uses the GADM1 table to avoid many of the shapes being very complex. -->
  <select id="svgGadm0" resultType="org.gbif.geocode.ws.model.SvgShape">
    SELECT gid_0 AS id, ST_AsSVG(geom) AS shape FROM gadm1 WHERE gid_1 NOT IN('CAN.8_1', 'GBR.3_1') OR gid_1 IS NULL
  UNION ALL
    SELECT gid_0 AS id, ST_AsSVG(ST_Intersection(geom, ST_SetSRID(ST_MakeBox2D(ST_Point(-180, -90), ST_Point(-88.985, 90)), 4326))) AS shape FROM gadm1 WHERE gid_1 = 'CAN.8_1'
  UNION ALL
    SELECT gid_0 AS id, ST_AsSVG(ST_Intersection(geom, ST_SetSRID(ST_MakeBox2D(ST_Point(-88.985, -90), ST_Point(180, 90)), 4326))) AS shape FROM gadm1 WHERE gid_1 = 'CAN.8_1'
  UNION ALL
    SELECT gid_0 AS id, ST_AsSVG(ST_Intersection(geom, ST_SetSRID(ST_MakeBox2D(ST_Point(-180, -90), ST_Point(180, 56.8)), 4326))) AS shape FROM gadm1 WHERE gid_1 = 'GBR.3_1'
  UNION ALL
    SELECT gid_0 AS id, ST_AsSVG(ST_Intersection(geom, ST_SetSRID(ST_MakeBox2D(ST_Point(-180, 56.8), ST_Point(180, 90)), 4326))) AS shape FROM gadm1 WHERE gid_1 = 'GBR.3_1'
  </select>

  <select id="svgGadm543210" resultType="org.gbif.geocode.ws.model.SvgShape">
    SELECT COALESCE(gid_5, gid_4, gid_3, gid_2, gid_1, gid_0) AS id, ST_AsSVG(geom) AS shape FROM gadm
  </select>

  <select id="svgGadm43210" resultType="org.gbif.geocode.ws.model.SvgShape">
    SELECT COALESCE(gid_4, gid_3, gid_2, gid_1, gid_0) AS id, ST_AsSVG(geom) AS shape FROM gadm4
  </select>

  <select id="svgGadm3210" resultType="org.gbif.geocode.ws.model.SvgShape">
    SELECT COALESCE(gid_3, gid_2, gid_1, gid_0) AS id, ST_AsSVG(geom) AS shape FROM gadm3
  </select>

  <select id="svgGadm210" resultType="org.gbif.geocode.ws.model.SvgShape">
    SELECT COALESCE(gid_2, gid_1, gid_0) AS id, ST_AsSVG(geom) AS shape FROM gadm2
  </select>

  <select id="svgGadm10" resultType="org.gbif.geocode.ws.model.SvgShape">
    SELECT COALESCE(gid_1, gid_0) AS id, ST_AsSVG(geom) AS shape FROM gadm1
  </select>

  <select id="svgIho" resultType="org.gbif.geocode.ws.model.SvgShape">
    SELECT 'http://marineregions.org/mrgid/' || mrgid AS id, ST_AsSVG(geom) AS shape FROM iho
  </select>

  <select id="svgWgsrpd" resultType="org.gbif.geocode.ws.model.SvgShape">
    SELECT level4_cod AS id, ST_AsSVG(geom) AS shape FROM wgsrpd_level4
  </select>

  <select id="svgCentroids" resultType="org.gbif.geocode.ws.model.SvgShape">
    SELECT id, ST_AsSVG(ST_Buffer(geom::geography, 5000, 'quad_segs=4')) AS shape FROM centroids
  </select>
</mapper>
